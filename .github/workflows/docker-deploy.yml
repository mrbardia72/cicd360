name: 🚀 CICD360 - Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: '1.24.6'

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: 📦 Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: 📦 Install dependencies
      run: go mod tidy
    
    - name: 🧪 Run tests
      run: go test -v ./...
    
    - name: 📊 Test coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
    
    - name: 🔍 Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build-and-push:
    name: 🐳 Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  deploy:
    name: 🚀 Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 📁 Copy deployment files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        source: "docker-compose.yml,scripts/"
        target: "/opt/cicd360/"
        strip_components: 0
    
    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          echo "🚀 Starting deployment process..."
          
          # Navigate to app directory
          cd /opt/cicd360
          
          # Make scripts executable
          chmod +x scripts/*.sh
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Set environment variables
          export IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          export APP_VERSION="${{ github.sha }}"
          export DEPLOY_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Run deployment script
          ./scripts/deploy.sh
          
          echo "✅ Deployment completed successfully!"

    - name: 🏥 Health check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          echo "🏥 Performing health check..."
          cd /opt/cicd360
          
          # Run health check script
          ./scripts/health-check.sh
          
          if [ $? -eq 0 ]; then
            echo "✅ Health check passed! Application is running successfully."
          else
            echo "❌ Health check failed! Checking logs..."
            docker-compose logs --tail=50 app
            exit 1
          fi

    - name: 🧹 Cleanup old resources
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          echo "🧹 Cleaning up old Docker resources..."
          
          # Remove unused images older than 24h
          docker image prune -af --filter "until=24h"
          
          # Remove unused volumes
          docker volume prune -f
          
          # Remove unused networks
          docker network prune -f
          
          echo "✅ Cleanup completed!"

    - name: 📧 Notify deployment status
      if: always()
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || '22' }}
        script: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 Deployment successful for commit ${{ github.sha }}"
            echo "🌐 Application is available at: http://${{ secrets.SERVER_HOST }}:8080"
            echo "🏥 Health check: http://${{ secrets.SERVER_HOST }}:8080/health"
          else
            echo "❌ Deployment failed for commit ${{ github.sha }}"
            echo "