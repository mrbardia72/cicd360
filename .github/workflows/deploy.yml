name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  IMAGE_NAME: mrbardia72/cicd360
  APP_NAME: cicd360

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: 📦 Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: 🏗️ Install dependencies
        run: go mod tidy

      # - name: 🧪 Run tests
      #   run: go test -v ./...

      # - name: 🔍 Run linter
      #   uses: golangci/golangci-lint-action@v3
      #   with:
      #     version: latest
      #     args: --timeout=5m

  build-and-push:
    name: 🐳 Build & Push
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}

  deploy:
    name: 🚀 Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📤 Copy deployment files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          source: "docker-compose.yml,scripts/"
          target: "/opt/${{ env.APP_NAME }}/"
          strip_components: 0
          overwrite: true

      - name: 🚀 Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /opt/${{ env.APP_NAME }}

            # Make scripts executable
            chmod +x scripts/*.sh

            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Pull latest image
            docker pull ${{ env.IMAGE_NAME }}:latest

            # Run deployment
            ./scripts/deploy.sh ${{ env.IMAGE_NAME }}:latest

            echo "✅ Deployment completed successfully!"

      - name: 🏥 Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            cd /opt/${{ env.APP_NAME }}

            # Run health check script
            ./scripts/health-check.sh

            if [ $? -eq 0 ]; then
              echo "🎉 Application is running and healthy!"
            else
              echo "❌ Health check failed!"
              docker-compose logs app
              exit 1
            fi

      - name: 🧹 Cleanup
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # Remove old unused images
            docker image prune -f
            docker system prune -f --volumes

            echo "🧹 Cleanup completed!"

  notify:
    name: 📢 Notify
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: 📢 Deployment notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 Deployment successful!"
            echo "🌐 Application URL: http://${{ secrets.SERVER_HOST }}:8080"
            echo "🏥 Health check: http://${{ secrets.SERVER_HOST }}:8080/health"
          else
            echo "❌ Deployment failed!"
          fi
